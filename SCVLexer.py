# Generated from SCV.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2:")
        buf.write("\u017c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13")
        buf.write("\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3")
        buf.write("\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3")
        buf.write("!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3")
        buf.write("*\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63")
        buf.write("\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\65\3\65\3\66\6\66")
        buf.write("\u014a\n\66\r\66\16\66\u014b\3\67\6\67\u014f\n\67\r\67")
        buf.write("\16\67\u0150\38\38\39\59\u0156\n9\39\39\3:\5:\u015b\n")
        buf.write(":\3:\3:\3:\5:\u0160\n:\3;\3;\3;\3;\7;\u0166\n;\f;\16;")
        buf.write("\u0169\13;\3<\3<\3<\3<\3=\3=\3=\3=\7=\u0173\n=\f=\16=")
        buf.write("\u0176\13=\3=\3=\3=\3=\3=\3\u0174\2>\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_")
        buf.write("\61a\62c\63e\64g\65i\2k\2m\2o\2q\66s\67u8w9y:\3\2\5\3")
        buf.write("\2\62;\4\2C\\c|\5\2\13\f\17\17\"\"\2\u0180\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2q\3")
        buf.write("\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{")
        buf.write("\3\2\2\2\5}\3\2\2\2\7\177\3\2\2\2\t\u0082\3\2\2\2\13\u0084")
        buf.write("\3\2\2\2\r\u0086\3\2\2\2\17\u0088\3\2\2\2\21\u008b\3\2")
        buf.write("\2\2\23\u008e\3\2\2\2\25\u0090\3\2\2\2\27\u0092\3\2\2")
        buf.write("\2\31\u0094\3\2\2\2\33\u0096\3\2\2\2\35\u0098\3\2\2\2")
        buf.write("\37\u009a\3\2\2\2!\u009c\3\2\2\2#\u009e\3\2\2\2%\u00a0")
        buf.write("\3\2\2\2\'\u00a3\3\2\2\2)\u00a6\3\2\2\2+\u00a9\3\2\2\2")
        buf.write("-\u00b2\3\2\2\2/\u00b9\3\2\2\2\61\u00bc\3\2\2\2\63\u00c1")
        buf.write("\3\2\2\2\65\u00c6\3\2\2\2\67\u00cc\3\2\2\29\u00d0\3\2")
        buf.write("\2\2;\u00d3\3\2\2\2=\u00d7\3\2\2\2?\u00db\3\2\2\2A\u00df")
        buf.write("\3\2\2\2C\u00e5\3\2\2\2E\u00eb\3\2\2\2G\u00ef\3\2\2\2")
        buf.write("I\u00f5\3\2\2\2K\u00f9\3\2\2\2M\u00fd\3\2\2\2O\u0103\3")
        buf.write("\2\2\2Q\u010b\3\2\2\2S\u0110\3\2\2\2U\u0115\3\2\2\2W\u0118")
        buf.write("\3\2\2\2Y\u011b\3\2\2\2[\u0126\3\2\2\2]\u012c\3\2\2\2")
        buf.write("_\u0131\3\2\2\2a\u0136\3\2\2\2c\u013a\3\2\2\2e\u013e\3")
        buf.write("\2\2\2g\u0142\3\2\2\2i\u0146\3\2\2\2k\u0149\3\2\2\2m\u014e")
        buf.write("\3\2\2\2o\u0152\3\2\2\2q\u0155\3\2\2\2s\u015a\3\2\2\2")
        buf.write("u\u0161\3\2\2\2w\u016a\3\2\2\2y\u016e\3\2\2\2{|\7<\2\2")
        buf.write("|\4\3\2\2\2}~\7=\2\2~\6\3\2\2\2\177\u0080\7<\2\2\u0080")
        buf.write("\u0081\7?\2\2\u0081\b\3\2\2\2\u0082\u0083\7*\2\2\u0083")
        buf.write("\n\3\2\2\2\u0084\u0085\7+\2\2\u0085\f\3\2\2\2\u0086\u0087")
        buf.write("\7.\2\2\u0087\16\3\2\2\2\u0088\u0089\7\60\2\2\u0089\u008a")
        buf.write("\7\60\2\2\u008a\20\3\2\2\2\u008b\u008c\7*\2\2\u008c\u008d")
        buf.write("\7+\2\2\u008d\22\3\2\2\2\u008e\u008f\7]\2\2\u008f\24\3")
        buf.write("\2\2\2\u0090\u0091\7_\2\2\u0091\26\3\2\2\2\u0092\u0093")
        buf.write("\7,\2\2\u0093\30\3\2\2\2\u0094\u0095\7\61\2\2\u0095\32")
        buf.write("\3\2\2\2\u0096\u0097\7-\2\2\u0097\34\3\2\2\2\u0098\u0099")
        buf.write("\7/\2\2\u0099\36\3\2\2\2\u009a\u009b\7?\2\2\u009b \3\2")
        buf.write("\2\2\u009c\u009d\7>\2\2\u009d\"\3\2\2\2\u009e\u009f\7")
        buf.write("@\2\2\u009f$\3\2\2\2\u00a0\u00a1\7>\2\2\u00a1\u00a2\7")
        buf.write("?\2\2\u00a2&\3\2\2\2\u00a3\u00a4\7@\2\2\u00a4\u00a5\7")
        buf.write("?\2\2\u00a5(\3\2\2\2\u00a6\u00a7\7#\2\2\u00a7\u00a8\7")
        buf.write("?\2\2\u00a8*\3\2\2\2\u00a9\u00aa\7h\2\2\u00aa\u00ab\7")
        buf.write("w\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad\7e\2\2\u00ad\u00ae")
        buf.write("\7v\2\2\u00ae\u00af\7k\2\2\u00af\u00b0\7q\2\2\u00b0\u00b1")
        buf.write("\7p\2\2\u00b1,\3\2\2\2\u00b2\u00b3\7t\2\2\u00b3\u00b4")
        buf.write("\7g\2\2\u00b4\u00b5\7v\2\2\u00b5\u00b6\7w\2\2\u00b6\u00b7")
        buf.write("\7t\2\2\u00b7\u00b8\7p\2\2\u00b8.\3\2\2\2\u00b9\u00ba")
        buf.write("\7k\2\2\u00ba\u00bb\7h\2\2\u00bb\60\3\2\2\2\u00bc\u00bd")
        buf.write("\7g\2\2\u00bd\u00be\7n\2\2\u00be\u00bf\7u\2\2\u00bf\u00c0")
        buf.write("\7g\2\2\u00c0\62\3\2\2\2\u00c1\u00c2\7n\2\2\u00c2\u00c3")
        buf.write("\7q\2\2\u00c3\u00c4\7q\2\2\u00c4\u00c5\7r\2\2\u00c5\64")
        buf.write("\3\2\2\2\u00c6\u00c7\7d\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9")
        buf.write("\7g\2\2\u00c9\u00ca\7c\2\2\u00ca\u00cb\7m\2\2\u00cb\66")
        buf.write("\3\2\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce\7p\2\2\u00ce\u00cf")
        buf.write("\7f\2\2\u00cf8\3\2\2\2\u00d0\u00d1\7q\2\2\u00d1\u00d2")
        buf.write("\7t\2\2\u00d2:\3\2\2\2\u00d3\u00d4\7p\2\2\u00d4\u00d5")
        buf.write("\7q\2\2\u00d5\u00d6\7v\2\2\u00d6<\3\2\2\2\u00d7\u00d8")
        buf.write("\7x\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7t\2\2\u00da>\3")
        buf.write("\2\2\2\u00db\u00dc\7k\2\2\u00dc\u00dd\7p\2\2\u00dd\u00de")
        buf.write("\7v\2\2\u00de@\3\2\2\2\u00df\u00e0\7h\2\2\u00e0\u00e1")
        buf.write("\7n\2\2\u00e1\u00e2\7q\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4")
        buf.write("\7v\2\2\u00e4B\3\2\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7")
        buf.write("\7t\2\2\u00e7\u00e8\7t\2\2\u00e8\u00e9\7c\2\2\u00e9\u00ea")
        buf.write("\7{\2\2\u00eaD\3\2\2\2\u00eb\u00ec\7o\2\2\u00ec\u00ed")
        buf.write("\7c\2\2\u00ed\u00ee\7v\2\2\u00eeF\3\2\2\2\u00ef\u00f0")
        buf.write("\7d\2\2\u00f0\u00f1\7g\2\2\u00f1\u00f2\7i\2\2\u00f2\u00f3")
        buf.write("\7k\2\2\u00f3\u00f4\7p\2\2\u00f4H\3\2\2\2\u00f5\u00f6")
        buf.write("\7g\2\2\u00f6\u00f7\7p\2\2\u00f7\u00f8\7f\2\2\u00f8J\3")
        buf.write("\2\2\2\u00f9\u00fa\7h\2\2\u00fa\u00fb\7q\2\2\u00fb\u00fc")
        buf.write("\7t\2\2\u00fcL\3\2\2\2\u00fd\u00fe\7y\2\2\u00fe\u00ff")
        buf.write("\7j\2\2\u00ff\u0100\7k\2\2\u0100\u0101\7n\2\2\u0101\u0102")
        buf.write("\7g\2\2\u0102N\3\2\2\2\u0103\u0104\7t\2\2\u0104\u0105")
        buf.write("\7g\2\2\u0105\u0106\7x\2\2\u0106\u0107\7g\2\2\u0107\u0108")
        buf.write("\7t\2\2\u0108\u0109\7u\2\2\u0109\u010a\7g\2\2\u010aP\3")
        buf.write("\2\2\2\u010b\u010c\7g\2\2\u010c\u010d\7z\2\2\u010d\u010e")
        buf.write("\7k\2\2\u010e\u010f\7v\2\2\u010fR\3\2\2\2\u0110\u0111")
        buf.write("\7v\2\2\u0111\u0112\7j\2\2\u0112\u0113\7g\2\2\u0113\u0114")
        buf.write("\7p\2\2\u0114T\3\2\2\2\u0115\u0116\7k\2\2\u0116\u0117")
        buf.write("\7u\2\2\u0117V\3\2\2\2\u0118\u0119\7k\2\2\u0119\u011a")
        buf.write("\7p\2\2\u011aX\3\2\2\2\u011b\u011c\7g\2\2\u011c\u011d")
        buf.write("\7z\2\2\u011d\u011e\7r\2\2\u011e\u011f\7t\2\2\u011f\u0120")
        buf.write("\7g\2\2\u0120\u0121\7u\2\2\u0121\u0122\7u\2\2\u0122\u0123")
        buf.write("\7k\2\2\u0123\u0124\7q\2\2\u0124\u0125\7p\2\2\u0125Z\3")
        buf.write("\2\2\2\u0126\u0127\7r\2\2\u0127\u0128\7t\2\2\u0128\u0129")
        buf.write("\7k\2\2\u0129\u012a\7p\2\2\u012a\u012b\7v\2\2\u012b\\")
        buf.write("\3\2\2\2\u012c\u012d\7t\2\2\u012d\u012e\7g\2\2\u012e\u012f")
        buf.write("\7c\2\2\u012f\u0130\7f\2\2\u0130^\3\2\2\2\u0131\u0132")
        buf.write("\7u\2\2\u0132\u0133\7s\2\2\u0133\u0134\7t\2\2\u0134\u0135")
        buf.write("\7v\2\2\u0135`\3\2\2\2\u0136\u0137\7r\2\2\u0137\u0138")
        buf.write("\7q\2\2\u0138\u0139\7y\2\2\u0139b\3\2\2\2\u013a\u013b")
        buf.write("\7n\2\2\u013b\u013c\7q\2\2\u013c\u013d\7i\2\2\u013dd\3")
        buf.write("\2\2\2\u013e\u013f\7o\2\2\u013f\u0140\7q\2\2\u0140\u0141")
        buf.write("\7f\2\2\u0141f\3\2\2\2\u0142\u0143\7c\2\2\u0143\u0144")
        buf.write("\7d\2\2\u0144\u0145\7u\2\2\u0145h\3\2\2\2\u0146\u0147")
        buf.write("\t\2\2\2\u0147j\3\2\2\2\u0148\u014a\5i\65\2\u0149\u0148")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u0149\3\2\2\2\u014b")
        buf.write("\u014c\3\2\2\2\u014cl\3\2\2\2\u014d\u014f\t\3\2\2\u014e")
        buf.write("\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u014e\3\2\2\2")
        buf.write("\u0150\u0151\3\2\2\2\u0151n\3\2\2\2\u0152\u0153\7/\2\2")
        buf.write("\u0153p\3\2\2\2\u0154\u0156\5o8\2\u0155\u0154\3\2\2\2")
        buf.write("\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\5")
        buf.write("k\66\2\u0158r\3\2\2\2\u0159\u015b\5o8\2\u015a\u0159\3")
        buf.write("\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015f")
        buf.write("\5k\66\2\u015d\u015e\7\60\2\2\u015e\u0160\5k\66\2\u015f")
        buf.write("\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160t\3\2\2\2\u0161")
        buf.write("\u0167\5m\67\2\u0162\u0166\5m\67\2\u0163\u0166\5i\65\2")
        buf.write("\u0164\u0166\7a\2\2\u0165\u0162\3\2\2\2\u0165\u0163\3")
        buf.write("\2\2\2\u0165\u0164\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165")
        buf.write("\3\2\2\2\u0167\u0168\3\2\2\2\u0168v\3\2\2\2\u0169\u0167")
        buf.write("\3\2\2\2\u016a\u016b\t\4\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016d\b<\2\2\u016dx\3\2\2\2\u016e\u016f\7%\2\2\u016f")
        buf.write("\u0170\7~\2\2\u0170\u0174\3\2\2\2\u0171\u0173\13\2\2\2")
        buf.write("\u0172\u0171\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0175\3")
        buf.write("\2\2\2\u0174\u0172\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0174")
        buf.write("\3\2\2\2\u0177\u0178\7~\2\2\u0178\u0179\7%\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u017b\b=\2\2\u017bz\3\2\2\2\13\2\u014b")
        buf.write("\u0150\u0155\u015a\u015f\u0165\u0167\u0174\3\b\2\2")
        return buf.getvalue()


class SCVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    FUNCTION = 21
    RETURN = 22
    IF = 23
    ELSE = 24
    LOOP = 25
    BREAK = 26
    AND = 27
    OR = 28
    NOT = 29
    VAR = 30
    INT = 31
    FLOAT = 32
    ARRAY = 33
    MAT = 34
    BEGIN = 35
    END = 36
    FOR = 37
    WHILE = 38
    REVERSE = 39
    EXIT = 40
    THEN = 41
    IS = 42
    IN = 43
    EXPRESSION = 44
    PRINT = 45
    READ = 46
    SQRT = 47
    POW = 48
    LOG = 49
    MOD = 50
    ABS = 51
    CTE_INT = 52
    CTE_FLOAT = 53
    ID = 54
    WS = 55
    COMMENT = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "';'", "':='", "'('", "')'", "','", "'..'", "'()'", "'['", 
            "']'", "'*'", "'/'", "'+'", "'-'", "'='", "'<'", "'>'", "'<='", 
            "'>='", "'!='", "'function'", "'return'", "'if'", "'else'", 
            "'loop'", "'break'", "'and'", "'or'", "'not'", "'var'", "'int'", 
            "'float'", "'array'", "'mat'", "'begin'", "'end'", "'for'", 
            "'while'", "'reverse'", "'exit'", "'then'", "'is'", "'in'", 
            "'expression'", "'print'", "'read'", "'sqrt'", "'pow'", "'log'", 
            "'mod'", "'abs'" ]

    symbolicNames = [ "<INVALID>",
            "FUNCTION", "RETURN", "IF", "ELSE", "LOOP", "BREAK", "AND", 
            "OR", "NOT", "VAR", "INT", "FLOAT", "ARRAY", "MAT", "BEGIN", 
            "END", "FOR", "WHILE", "REVERSE", "EXIT", "THEN", "IS", "IN", 
            "EXPRESSION", "PRINT", "READ", "SQRT", "POW", "LOG", "MOD", 
            "ABS", "CTE_INT", "CTE_FLOAT", "ID", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "FUNCTION", "RETURN", "IF", "ELSE", "LOOP", "BREAK", "AND", 
                  "OR", "NOT", "VAR", "INT", "FLOAT", "ARRAY", "MAT", "BEGIN", 
                  "END", "FOR", "WHILE", "REVERSE", "EXIT", "THEN", "IS", 
                  "IN", "EXPRESSION", "PRINT", "READ", "SQRT", "POW", "LOG", 
                  "MOD", "ABS", "DIGIT", "DIGITS", "LETTER", "SIGN", "CTE_INT", 
                  "CTE_FLOAT", "ID", "WS", "COMMENT" ]

    grammarFileName = "SCV.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


